<?php

/**
 * BaseProducts
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property string $title_plain
 * @property float $price
 * @property float $brand_price
 * @property clob $detail
 * @property integer $status
 * @property integer $view
 * @property timestamp $created_date
 * @property string $warranty
 * @property string $maker
 * @property clob $description
 * @property string $origin
 * @property string $power
 * @property integer $product_brands_id
 * @property integer $product_categories_id
 * @property integer $product_type_id
 * @property integer $is_sale_off
 * @property integer $is_new
 * @property string $images
 * @property string $author
 * @property ProductCategories $ProductCategories
 * @property ProductType $ProductType
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseProducts extends Doctrine_Record {
	public function setTableDefinition() {
		$this->setTableName ( 'products' );
		$this->hasColumn ( 'id', 'integer', 4, array (
				'type' => 'integer',
				'primary' => true,
				'autoincrement' => true,
				'length' => '4' 
		) );
		$this->hasColumn ( 'title', 'string', 125, array (
				'type' => 'string',
				'length' => '125' 
		) );
		$this->hasColumn ( 'title_plain', 'string', 125, array (
				'type' => 'string',
				'length' => '125' 
		) );
		$this->hasColumn ( 'price', 'float', null, array (
				'type' => 'float',
				'notnull' => true 
		) );
		$this->hasColumn ( 'brand_price', 'float', null, array (
				'type' => 'float',
				'notnull' => true 
		) );
		$this->hasColumn ( 'detail', 'clob', 65535, array (
				'type' => 'clob',
				'length' => '65535' 
		) );
		$this->hasColumn ( 'status', 'integer', 1, array (
				'type' => 'integer',
				'length' => '1' 
		) );
		$this->hasColumn ( 'view', 'integer', 4, array (
				'type' => 'integer',
				'length' => '4' 
		) );
		$this->hasColumn ( 'created_date', 'timestamp', null, array (
				'type' => 'timestamp' 
		) );
		$this->hasColumn ( 'warranty', 'string', 125, array (
				'type' => 'string',
				'length' => '125' 
		) );
		$this->hasColumn ( 'maker', 'string', 45, array (
				'type' => 'string',
				'length' => '45' 
		) );
		$this->hasColumn ( 'description', 'clob', 65535, array (
				'type' => 'clob',
				'length' => '65535' 
		) );
		$this->hasColumn ( 'origin', 'string', 45, array (
				'type' => 'string',
				'length' => '45' 
		) );
		$this->hasColumn ( 'power', 'string', 125, array (
				'type' => 'string',
				'length' => '125' 
		) );
		$this->hasColumn ( 'product_brands_id', 'integer', 4, array (
				'type' => 'integer',
				'notnull' => true,
				'length' => '4' 
		) );
		$this->hasColumn ( 'product_categories_id', 'integer', 4, array (
				'type' => 'integer',
				'notnull' => true,
				'length' => '4' 
		) );
		$this->hasColumn ( 'product_type_id', 'integer', 4, array (
				'type' => 'integer',
				'notnull' => true,
				'length' => '4' 
		) );
		$this->hasColumn ( 'is_sale_off', 'integer', 1, array (
				'type' => 'integer',
				'notnull' => true,
				'length' => '1' 
		) );
		$this->hasColumn ( 'is_new', 'integer', 1, array (
				'type' => 'integer',
				'notnull' => true,
				'length' => '1' 
		) );
		$this->hasColumn ( 'images', 'string', 256, array (
				'type' => 'string',
				'length' => '256' 
		) );
		$this->hasColumn ( 'author', 'string', 45, array (
				'type' => 'string',
				'length' => '45' 
		) );
		
		$this->index ( 'fk_products_product_brands1', array (
				'fields' => array (
						0 => 'product_brands_id' 
				) 
		) );
		$this->index ( 'fk_products_product_categories1', array (
				'fields' => array (
						0 => 'product_categories_id' 
				) 
		) );
		$this->index ( 'fk_products_product_type1', array (
				'fields' => array (
						0 => 'warranty' 
				) 
		) );
		$this->index ( 'fk_products_gender1', array (
				'fields' => array (
						0 => 'maker' 
				) 
		) );
		$this->index ( 'fk_products_product_type1_idx', array (
				'fields' => array (
						0 => 'product_type_id' 
				) 
		) );
		$this->option ( 'charset', 'utf8' );
		$this->option ( 'type', 'MyISAM' );
	}
	
	public function setUp() {
		parent::setUp ();
		$this->hasOne ( 'ProductCategories', array (
				'local' => 'product_categories_id',
				'foreign' => 'id',
				'owningSide' => true 
		) );
		
		$this->hasOne ( 'ProductType', array (
				'local' => 'product_type_id',
				'foreign' => 'id',
				'owningSide' => true 
		) );
	}
}